package main

import (
    "database/sql"
    "fmt"
    "log"
    "net/http"

    "github.com/gin-gonic/gin"
    _ "github.com/go-sql-driver/mysql"

type User struct {
    Name string `json:"name"`
    Age  int    `json:"age"`
}

var db *sql.DB

func main() {

    // 连接到MySQL数据库
    var err error
    db, err = sql.Open("mysql", "root:Foxconn123@tcp(localhost:3306)/userdb")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // 测试数据库连接
    err = db.Ping()
    if err != nil {
        log.Fatal(err)
    }


    // 使用默认中间件创建一个Gin路由器
    r := gin.Default()

    // 定义一个简单的GET路由
    r.GET("/ping", func(c *gin.Context) {
        c.JSON(http.StatusOK, gin.H{
            "message": "pong",
        })
    })

    // 定义一个GET路由，用于获取用户信息
    r.GET("/user/:name", func(c *gin.Context) {
        name := c.Param("name")
        c.JSON(http.StatusOK, gin.H{
            "user": name,
        })
    })

    // POST请求处理器，用于接收用户信息并存储到数据库
    r.POST("/user", func(c *gin.Context) {
        // 绑定POST请求的JSON数据到结构体
        var user User
        if err := c.BindJSON(&user); err != nil {
            c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
            return
        }

        // 将用户信息插入数据库
        insertQuery := "INSERT INTO users (name, age) VALUES (?, ?)"
        _, err := db.Exec(insertQuery, user.Name, user.Age)
        if err != nil {
            c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to insert data into database"})
            return
        }

        // 返回成功响应
        c.JSON(http.StatusOK, gin.H{"message": "User data received and stored successfully"})
    })

    // 启动服务器
    r.Run(":8080") // 默认监听并服务于 0.0.0.0:8080
}

